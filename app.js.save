// requires

var express = require('express');
var session = require('express-session');
var app = express();
var http = require('http').Server(app);
var multer = require('multer');
var mongoose = require('mongoose');
var passport = require('passport');
var expressValidator = require('express-validator');
var flash = require('express-flash');
var MongoStore = require('connect-mongo')(session);
var bodyParser = require('body-parser');

// custom 
var config = require('./config/config');
var pass = require('./config/passport');
var routes = require('./controllers/routes');
var ctrlMulter = require('./controllers/multer');

// database
mongoose.connect(config.db);
mongoose.connection.on('error', function () {
  console.error('MongoDB Connection Error. Please make sure that MongoDB is running.');
});

var CT_PORT = 80;

app.set('views', './views');
app.set('view engine', 'jade');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(expressValidator());
app.use(session({
  resave: true,
  saveUninitialized: true,
  secret: config.sessionSecret,
  store: new MongoStore({
    url: config.db,
    autoReconnect: true
  })
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());
app.use(express.static(__dirname + '/public'));

app.get('/', routes.home);
app.get('/account', pass.isAuth, routes.account);
app.get('/login', routes.getlogin);
app.get('/signup', routes.getsignup);
app.post('/signup', routes.postsignup);
app.post('/login', routes.postlogin);
app.get('/admin', [pass.isAuth, pass.isAdmin], routes.admin);
app.get('/logout', routes.logout);

app.get('/simplesignup', routes.getsimplesignup);
app.post('/simplesignup', routes.postsimplesignup);

app.get('/createCode', [pass.isSuperUser], routes.getCreateCode);
app.post('/createCode', [pass.isSuperUser], routes.postCreateCode);

app.get('/linkCode', [pass.isAuth], routes.getLinkCode);
app.post('/linkCode', [pass.isAuth], routes.postLinkCode);

app.get('/viewUploadCode/:codeId', [pass.isAuth, pass.checkUploadCode], routes.getViewUploadCode);
app.post('/viewUploadCode/:codeId', [pass.isAuth, pass.checkUploadCode], routes.postViewUploadCode);

app.get('/downloadFiles/:codeId', [pass.isAuth, pass.checkUploadCode], routes.getDownloadFiles);

app.post('/uploadFile/:codeId', [pass.isAuth, pass.checkUploadCode, multer({
  dest: './uploads/',
  changeDest: ctrlMulter.changeDest,
  onFileUploadStart: ctrlMulter.onFileUploadStart,
  onFileUploadComplete: ctrlMulter.onFileUploadComplete,
  onError: ctrlMulter.onError
}), function (req, res) {
  console.log('post...');
  console.log(req.body); // form fields
  console.log(req.files); // form files
  res.status(204).end();
}]);



// handles form saveProfile
app.post('/saveProfile', [pass.isAuth], routes.saveProfile);

app.get('/uploadCode/', [pass.isAuth], routes.uploadCodeList);
app.get('/uploadCode/:id', [pass.isAuth], routes.uploadCodeGet);
app.post('/uploadCode/', [pass.isSuperUser], routes.uploadCodeAdd);
app.post('/uploadCode/:id', [pass.isSuperUser], routes.uploadCodeUpdate);



//routes 

// app.get('/', function (req, res) {
//   res.render('home');
// });

// app.post('/', [multer({
//   dest: './uploads/',
//   onFileUploadStart: function (file, req, res) {
//     console.log('file uploads start...');
//   },
//   onFileUploadComplete: function (file, req, res) {
//     console.log('file upload completed');
//   },
//   onError: function (error, next) {
//     console.log(error);
//     next(error);
//   }
// }), function (req, res) {
//   console.log('post...');
//   console.log(req.body); // form fields
//   console.log(req.files); // form files
//   res.status(204).end();
// }]);

http.listen(CT_PORT, function () {
  console.log('listenning on port ' + CT_PORT + ' ...');
});

// app.use(multer({
//   dest: './uploads/'
// }));
/*

,
  rename: function (fieldname, filename) {
    return filename.replace(/\W+/g, '-').toLowerCase() + Date.now();
  },
  limits: {
    fileSize: 10000000,
    files: 2,
    fields: 5
  },
  onFileUploadStart: function (file, req, res) {
    console.log('onFileUploadStart...', file);
    //if (file.originalname == 'virus.exe') return false;
    return true;
  },
  onFileUploadComplete: function (file, req, res) {
    console.log(file.fieldname + ' uploaded to  ' + file.path);
  },
  onFileSizeLimit: function (file) {
    console.log('Failed: ', file.originalname);
    fs.unlink('./' + file.path);
  }

*/
